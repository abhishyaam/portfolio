{"version":3,"sources":["components/landing/landing.lazy.js","components/Photography/Photography.lazy.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Lazylanding","lazy","landing","props","fallback","LazyPhotography","Photography","loader","document","querySelector","root","App","showLoader","classList","remove","hideLoader","add","this","path","exact","render","name","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","setTimeout","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yQAEMA,G,MAAcC,gBAAK,kBAAM,iCAQhBC,EANC,SAAAC,GAAK,OACnB,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACJ,EAAgBG,K,eCJfE,EAAkBJ,gBAAK,kBAAM,gCAQpBK,EANK,SAAAH,GAAK,OACvB,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACC,EAAoBF,KCCnBI,EAASC,SAASC,cAAc,qBAChCC,EAAOF,SAASC,cAAc,SA+BrBE,E,4MA1BbC,WAAa,kBAAML,EAAOM,UAAUC,OAAO,gB,EAC3CC,WAAa,WAEXR,EAAOM,UAAUG,IAAI,QACrBN,EAAKG,UAAUC,OAAO,S,kEAMtBG,KAAKF,e,+BAGL,OAEI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAACC,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAAD,iBAAaA,EAAb,CAAoBkB,KAAO,aAClE,kBAAC,IAAD,CAAOH,KAAK,eAAeE,OAAQ,SAACjB,GAAD,OAAW,kBAAC,EAAD,iBAAiBA,EAAjB,CAAwBkB,KAAO,mB,GAtBvEC,IAAMC,WCGlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,YAAW,WACTC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAAS6C,eAAe,WAE1B,KDQK,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,aAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OChC/BE,K","file":"static/js/main.9b5e94ae.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\nconst Lazylanding = lazy(() => import('./landing'));\n\nconst landing = props => (\n  <Suspense fallback={null}>\n    <Lazylanding {...props} />\n  </Suspense>\n);\n\nexport default landing;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyPhotography = lazy(() => import('./Photography'));\n\nconst Photography = props => (\n  <Suspense fallback={null}>\n    <LazyPhotography {...props} />\n  </Suspense>\n);\n\nexport default Photography;\n","import React from \"react\";\nimport \"./App.css\";\nimport Landing from \"../landing/landing.lazy\";\nimport { BrowserRouter as Router, Switch, Route,HashRouter } from \"react-router-dom\";\n\n\nimport Photography  from '../Photography/Photography.lazy'\nconst loader = document.querySelector(\".loader-container\");\nconst root = document.querySelector(\"#root\");\nclass App extends React.Component {\n  // constructor(props){\n  //   super(props)\n  // }\n  showLoader = () => loader.classList.remove(\"hide-loader\");\n  hideLoader = () => {\n    // console.log('hiding loader');\n    loader.classList.add(\"hide\");\n    root.classList.remove(\"hide\");\n    // console.log(loader);\n  };\n  componentDidMount() {\n    // console.log('Component mounting');\n    //hide .loader-container div when react dom is rendered\n    this.hideLoader();\n  }\n  render() {\n    return (\n\n        <HashRouter>\n          <Switch>\n          <Route path=\"/\" exact render={(props) => <Landing {...props} name = \"Abhi\"/>}/>\n            <Route path=\"/photography\" render={(props) => <Photography {...props} name = \"Abhi\"/>}/>\n          </Switch>\n        </HashRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nsetTimeout(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n},2000)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}